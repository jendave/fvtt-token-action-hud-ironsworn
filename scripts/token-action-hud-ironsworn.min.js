const t={ID:"token-action-hud-ironsworn"},e={ID:"token-action-hud-core"},s="2.0",n={stats:"IRONSWORN.Stats"},i={stats:{id:"stats",name:"IRONSWORN.Stats",type:"system"}},a={assets:{groupId:"assets"},progress:{groupId:"progress"},bondset:{groupId:"bondsets"}},o={edge:"Edge",heart:"Heart",iron:"Iron",shadow:"Shadow",wits:"Wits"};let c=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{c=class Utils{static getSetting(s,n=null){let i=n??null;try{i=game.settings.get(t.ID,s)}catch{e.api.Logger.debug(`Setting '${s}' not found`)}return i}static async setSetting(s,n){try{n=await game.settings.set(t.ID,s,n),e.api.Logger.debug(`Setting '${s}' set to '${n}'`)}catch{e.api.Logger.debug(`Setting '${s}' not found`)}}}}));let r=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{r=class ActionHandler extends t.api.ActionHandler{a;async buildSystemActions(e){if(this.actors=this.actor?[this.actor]:this._getActors(),this.actorType=this.actor?.type,this.actor){let e=this.actor.items;e=t.api.Utils.sortItemsByName(e),this.items=e}"character"===this.actorType?this.#t():this.actor||this.#e()}#t(){this.#s()}#e(){}async#n(){if(0===this.items.size)return;const e="item",s=new Map;for(const[t,e]of this.items){const n=e.type,i=s.get(n)??new Map;i.set(t,e),s.set(n,i)}for(const[i,o]of s){const s=a[i]?.groupId;if(!s)continue;const c={id:s,type:"system"},r=[...o].map((([s,i])=>{const a=s,o=i.name,c=t.api.Utils.i18n(n[e]),r=`${c?`${c}: `:""}${o}`,l=[e,a].join(this.delimiter);return{id:a,name:o,listName:r,encodedValue:l}}));this.addActions(r,c)}}#s(){const e="stats",s=[];for(const i in o){const a=i,c=o[i],r=t.api.Utils.i18n(n[e]),l=`${r?`${r}: `:""}${c}`,d=[e,a].join(this.delimiter);s.push({id:a,name:c,listName:l,encodedValue:d})}this.addActions(s,{id:"stats",type:"system"})}}}));let l=null;Hooks.once("tokenActionHudCoreApiReady",(async t=>{const e=i;Object.values(e).forEach((e=>{e.name=t.api.Utils.i18n(e.name),e.listName=`Group: ${t.api.Utils.i18n(e.listName??e.name)}`}));const s=Object.values(e);l={layout:[{nestId:"stats",id:"stats",name:t.api.Utils.i18n("IRONSWORN.Stats"),groups:[{...e.stats,nestId:"stats_stats"}]}],groups:s}}));let d=null;function register(t){}Hooks.once("tokenActionHudCoreApiReady",(async t=>{d=class RollHandler extends t.api.RollHandler{async handleActionClick(t,e){const[s,n]=e.split("|");if(["item"].includes(s)&&this.isRenderItem())return this.doRenderItem(this.actor,n);const i=["character"];if(this.actor)return void await this.#i(t,this.actor,this.token,s,n);const a=canvas.tokens.controlled.filter((t=>i.includes(t.actor?.type)));for(const e of a){const i=e.actor;await this.#i(t,i,e,s,n)}}async handleActionHover(t,e){}async handleGroupClick(t,e){}async#i(t,e,s,n,i){switch(n){case"item":this.#a(t,e,i);break;case"stat":this.#o(t,e,i);break;case"utility":this.#c(s,i)}}#a(t,e,s){e.items.get(s).toChat(t)}#o(t,e,s){e.statRoll({rollModifiers:{stat:e.system.characteristics[s].shortLabel}},!0)}async#c(t,e){if("endTurn"===e)game.combat?.current?.tokenId===t.id&&await(game.combat?.nextTurn())}}}));let u=null;Hooks.once("tokenActionHudCoreApiReady",(async e=>{u=class SystemManager extends e.api.SystemManager{getActionHandler(){return new r}getAvailableRollHandlers(){return{core:"Core Ironsworn"}}getRollHandler(t){let e;return e=new d,e}async registerDefaults(){return l}registerSettings(t){}registerStyles(){return{template:{class:"tah-style-template-style",file:"tah-template-style",moduleId:t.ID,name:"Template Style"}}}}})),Hooks.on("tokenActionHudCoreApiReady",(async()=>{const e=game.modules.get(t.ID);e.api={requiredCoreModuleVersion:"2.0",SystemManager:u},Hooks.call("tokenActionHudSystemReady",e)}));export{n as ACTION_TYPE,r as ActionHandler,e as CORE_MODULE,l as DEFAULTS,i as GROUP,a as ITEM_TYPE,t as MODULE,s as REQUIRED_CORE_MODULE_VERSION,d as RollHandler,o as STATS,u as SystemManager,c as Utils,register};
